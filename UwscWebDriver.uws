
module WebDriver
    dim debug = FALSE
    const Chrome  = "chromedriver.exe"
    const Firefox = "geckodriver.exe"
    const Edge    = "MicrosoftWebDriver.exe"

    dim ScriptControl,CodeObject
    procedure WebDriver
        if fopen("json2.js", F_EXISTS) then
            fid = fopen("json2.js", F_READ)
            json2 = fget(fid, F_ALLTEXT)
            fclose(fid)
        else
            msgbox("json2.jsがありません")
            exitexit
        endif

        ScriptControl = createoleobj("ScriptControl")
        try
            with ScriptControl
                .Language = "JScript"
                .ExecuteStatement(json2)
                .ExecuteStatement(jsStatement)
                CodeObject = .CodeObject
            endwith
        except
            e = ScriptControl.Error
            if e.number then
                msg = ""
                msg = msg + TRY_ERRLINE + "<#CR>"
                msg = msg + TRY_ERRMSG + "<#CR>"
                msg = msg + e.Source + " (" + e.Number + ")" + "<#CR>"
                msg = msg + e.Description + "<#CR>"
                msg = msg + "[Line: " + e.Line + "] " + e.Text + "<#CR>"
                msgbox(msg)
            endif
            exitexit
        endtry
        json2 = EMPTY
    fend

    procedure Debug(b = TRUE)
        debug = b
    fend
    
    
    function Start(driverpath, port = 0, capabilities = EMPTY)
        driverversion = trim(doscmd(driverpath + " --version 2> NUL"))

        if ! length(driverversion) then
            result = null
            msgbox("WebDriverが見つかりません: " + driverpath)
            exit
        endif

        select TRUE
            case pos(Chrome, driverpath) > 0
                capabilities = ChromeCapabilities
                if port = 0 then port = 9515
            case pos(Edge, driverpath) > 0
                if port = 0 then port = 17556
                capabilities = EdgeCapabilities
            case pos(Firefox, driverpath) > 0
                if port = 0 then port = 7055
                capabilities = ChromeCapabilities
            default
                if port = 0 then 
                    msgbox("ポート番号を指定してください")
                    exitexit 
                elseif capabilities = EMPTY then
                    msgbox("Capabilityを指定してください")
                    exitexit
                endif
        selend
        
        cmd = "<#DBL>" + driverpath + "<#DBL> --port=" + port + " --verbose"
        if ! Process.Find(cmd) then
            doscmd(cmd, TRUE, TRUE)
            if ! Process.Wait(port) then
                result = null
                msgbox("WebDriverが起動していません")
                exit
            endif
        endif
        sleep(2)
        result = CodeObject.WebDriver.Start(port, capabilities, debug)
    fend

    function CreateJSArray()
        result = CodeObject.WebDriver.NewJSArray()
    fend
    

    function GetLog()
        result = CodeObject.WebDriver.GetLog()
    fend
    
    textblock EdgeCapabilities
        {
            "capabilities": {}
        }
    endtextblock
    
    textblock ChromeCapabilities
        {
            "desiredCapabilities": {},
            "requiredCapabilities": {}
        }
    endtextblock
    

    textblock jsStatement
/* WebDriverオブジェクト */
var WebDriver = function(sessionId, port, debug) {
    this.sessionId = sessionId;
    this.port = port;
    this.debug = debug;
    this.apibase = '/session/' + this.sessionId;
};

WebDriver.Start = function(port, capabilities, debug) {
    if (capabilities)
        capabilities = JSON.parse(capabilities);
    var api = '/session';
    var body = capabilities;
    r = WebDriver._request('POST', api, body, port, debug);
    if (r) {
        var sessionId = r.sessionId ? r.sessionId: r.value.sessionId;
        var d = new WebDriver(sessionId, port, debug);
        d.SetImplicitWait(10000);
        return d;
    }
    return null;
};

WebDriver.Log = [];
WebDriver.GetLog = function() {
    var d = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < WebDriver.Log.length; i++) {
        d.add(i, WebDriver.Log[i]);
    }
    return d.Items();
}

WebDriver.NewJSArray = function() {
    return [];
}

WebDriver._request = function(method, api, body, port, debug) {
    var uri = "http://localhost:" + port + api;
    var xhr = new ActiveXObject("Msxml2.XMLHTTP");
    xhr.open(method, uri, false);
    xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
    strbody = body ? JSON.stringify(body): null;
    xhr.send(strbody);
    if (debug) {
        WebDriver.Log.push({
            "api": api,
            "body": strbody,
            "status": xhr.status,
            "statusText": xhr.statusText,
            "response": xhr.responseText
        });
    }
    if (xhr.status === 200) {
        return JSON.parse(xhr.responseText);
    }
    return null;
};

WebDriver.prototype.request = function(method, api, body) {
    return WebDriver._request(method, api, body, this.port, this.debug);
};

WebDriver.prototype.SetImplicitWait = function(millisec) {
    var api = this.apibase + '/timeouts'
    var body = {"implicit": millisec};
    return this.request('POST', api, body);
};

WebDriver.prototype.Navigate = function(url, target) {
    var api = this.apibase + '/url'
    var body = {"url": url};
    if (! target) {
        return this.request('POST', api, body);
    }
    var script = "var tmp = document.createElement('a');"
               + "tmp.href = arguments[0];"
               + "tmp.target = arguments[1];"
               + "tmp.click();"
               + "tmp = null;"
    var args = [url, target];
    return this.ExecuteScript(script, args);
};

WebDriver.prototype.GetUrl = function() {
    var api = this.apibase + '/url'
    r = this.request('GET', api);
    return r.value;
};

WebDriver.prototype.FindElement = function(selector) {
    var api = this.apibase + '/element'
    var body = {
        "using": "css selector",
        "value": selector
    };
    r = this.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    return new Element(this, r.value.ELEMENT, r.value);
};

WebDriver.prototype.FindElements = function(selector) {
    var api = this.apibase + '/elements'
    var body = {
        "using": "css selector",
        "value": selector
    };
    r = this.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        dictionary.add(i, new Element(this, r.value[i].ELEMENT, r.value[i]));
    }
    return dictionary.Items();
};

WebDriver.prototype.FindElementsByName = function(name) {
    return this.FindElements('*[name="' + name + '"]');
};

WebDriver.prototype.Close = function() {
    var api = this.apibase
    return this.request('DELETE', api);
};

WebDriver.prototype.SaveScreenshot = function(path) {
    var api = this.apibase + '/screenshot'
    r = this.request('GET', api);
    WebDriver._saveScreenshot(r.value, path);
};

WebDriver.prototype.ExecuteScript = function(script, args) {
    var api = this.apibase + '/execute/sync'
    var body = {
        "script": script,
        "args": args
    };
    r = this.request('POST', api, body);
    return r.value;
};

WebDriver._saveScreenshot = function(base64, path) {
    var xmldom = new ActiveXObject('Microsoft.XMLDOM');
    var elem = xmldom.createElement("base64");
    elem.dataType = "bin.base64";
    elem.text = base64;
    bin = elem.nodeTypedValue;

    var stream = new ActiveXObject('ADODB.Stream');
    stream.Open()
    stream.Type = 1 // adTypeBinary
    stream.Write(bin)
    stream.SaveToFile(path, 2) // adSaveCreateOverWrite
    stream.Close()
}

/* Elementオブジェクト */
var Element = function(driver, elementId, elementObject) {
    this.driver = driver;
    this.elementId = elementId;
    this.object = elementObject;
    this.apibase = '/session/' + this.driver.sessionId + '/element/' + this.elementId;
};

Element.prototype.raw = function() {
    return this.object;
};

Element.prototype.Click = function() {
    var api = this.apibase + '/click';
    return this.driver.request('POST', api);
};

Element.prototype.Clear = function() {
    var api = this.apibase + '/clear';
    return this.driver.request('POST', api);
};

Element.prototype.SetValue = function(value) {
    var api = this.apibase + '/value';
    var body = {
        text: value,
        value: value.split('')
    };
    return this.driver.request('POST', api, body);
};

Element.prototype.GetValue = function() {
    return this.GetAttribute('value');
};

Element.prototype.GetText = function() {
    var api = this.apibase + '/text';
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.GetAttribute = function(attribute) {
    var api = this.apibase + '/attribute/' + attribute;
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.IsSelected = function() {
    var api = this.apibase + '/selected';
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.FindElement = function(selector) {
    var api = this.apibase + '/element';
    var body = {
        "using": "css selector",
        "value": selector
    };
    r = this.driver.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    return new Element(this.driver, r.value.ELEMENT, r.value);
};

Element.prototype.FindElements = function(selector) {
    var api = this.apibase + '/elements';
    var body = {
        "using": "css selector",
        "value": selector
    };
    r = this.driver.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        dictionary.add(i, new Element(this.driver, r.value[i].ELEMENT, r.value[i]));
    }
    return dictionary.Items();
};

Element.prototype.SaveScreenshot = function(path) {
    var api = this.apibase + '/screenshot'
    r = this.driver.request('GET', api);
    WebDriver._saveScreenshot(r.value, path);
};

    endtextblock
    
    function GetError()
        result = ""
        with ScriptControl.Error
            if .Number then
                result = result + "Number      :" + .Number + "<#CR>"
                result = result + "Source      :" + .Source + "<#CR>"
                result = result + "Description :" + .Description //+ "<#CR>"
                // result = result + "HelpFile    :" + .HelpFile + "<#CR>"
                // result = result + "HelpContext :" + .HelpContext + "<#CR>"
                result = result + "Text        :" + .Text + "<#CR>"
                result = result + "Line        :" + .Line + "<#CR>"
                result = result + "Column      :" + .Column
            endif
        endwith
    fend

endmodule

module Process
    dim locator

    procedure Process
        locator = createoleobj("WbemScripting.SWbemLocator")
    fend
    
    function Find(cmd)
        service = locator.ConnectServer()
        cmd = replace(cmd, "\", "\\")
        q = service.ExecQuery("select CommandLine from win32_process where CommandLine like '%" + cmd + "%'")
        result = q.Count
    fend
    
    function FindListeningPort(port)
        service = locator.ConnectServer(".", "Root\StandardCimv2")
        q = service.ExecQuery("select LocalPort from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
        result = q.Count
    fend
    

    function Wait(port, timeout = 10)
        limit = gettime() + timeout
        repeat
            if gettime() > limit then
                result = FALSE
                exit
            else
                sleep(0.5)
            endif
        until FindListeningPort(port) > 0
        result = TRUE
    fend
endmodule

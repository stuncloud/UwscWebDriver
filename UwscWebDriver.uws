
module WebDriver
    dim debug = FALSE
    dim port
    const Chrome  = "chromedriver.exe"
    const Edge    = "MicrosoftWebDriver.exe"
    const Firefox = "geckodriver.exe"

    dim ScriptControl,CodeObject
    procedure WebDriver
        if fopen("json2.js", F_EXISTS) then
            fid = fopen("json2.js", F_READ)
            json2 = fget(fid, F_ALLTEXT)
            fclose(fid)
        else
            msgbox("json2.jsがありません")
            exitexit
        endif
        ScriptControl = createoleobj("ScriptControl")
        try
            with ScriptControl
                .Language = "JScript"
                .ExecuteStatement(json2)
                .ExecuteStatement(jsStatement)
                CodeObject = .CodeObject
            endwith
        except
            e = ScriptControl.Error
            if e.number then
                msg = ""
                msg = msg + TRY_ERRLINE + "<#CR>"
                msg = msg + TRY_ERRMSG + "<#CR>"
                msg = msg + e.Source + " (" + e.Number + ")" + "<#CR>"
                msg = msg + e.Description + "<#CR>"
                msg = msg + "[Line: " + e.Line + "] " + e.Text + "<#CR>"
                msgbox(msg)
            endif
            exitexit
        endtry
        json2 = EMPTY
    fend
    
    function Start(driverpath, port = 9515)
        if ! fopen(driverpath, F_EXISTS) then
            result = EMPTY
            msgbox("WebDriverが見つかりません: " + driverpath)
            exit
        endif
        
        cmd = "<#DBL>" + driverpath + "<#DBL> --port=" + port
        this.port = port
        if ! Process.Find(cmd) then
            doscmd(cmd, TRUE, TRUE)
            if ! Process.Wait(port) then
                result = EMPTY
                msgbox("WebDriverが起動していません")
                exit
            endif
        endif
        result = CodeObject.WebDriver.Start(port)
    fend

    textblock jsStatement
/* WebDriverオブジェクト */
var WebDriver = function(sessionId, port) {
    this.sessionId = sessionId;
    this.port = port;
};

WebDriver.Start = function(port) {
    var api = '/session';
    var body = {
        "desiredCapabilities": {},
        "requiredCapabilities": {}
    };
    r = WebDriver._request('POST', api, body, port);
    return new WebDriver(r.sessionId, port);
};

WebDriver._request = function(method, api, body, port) {
    var uri = "http://localhost:" + port + api;
    var xhr = new ActiveXObject("Msxml2.XMLHTTP");
    xhr.open(method, uri, false);
    xhr.setRequestHeader("Content-Type", "text/plain; charset=UTF-8");
    strbody = JSON.stringify(body);
    xhr.send(strbody);
    if (xhr.status === 200) {
        return JSON.parse(xhr.responseText);
    }
    return null;
};

WebDriver.prototype.request = function(method, api, body) {
    return WebDriver._request(method, api, body, this.port);
};

WebDriver.prototype.Navigate = function(url) {
    var api = '/session/' + this.sessionId + '/url'
    var body = {"url": url};
    return this.request('POST', api, body);
};

WebDriver.prototype.GetUrl = function() {
    var api = '/session/' + this.sessionId + '/url'
    r = this.request('GET', api);
    return r.value;
};

WebDriver.prototype.FindElement = function(selector) {
    var api = '/session/' + this.sessionId + '/element'
    var body = {
        "using": "css",
        "value": selector
    };
    r = this.request('POST', api, body);
    return new Element(this, r.value.ELEMENT);
};

WebDriver.prototype.FindElements = function(selector) {
    var api = '/session/' + this.sessionId + '/elements'
    var body = {
        "using": "css",
        "value": selector
    };
    r = this.request('POST', api, body);
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        dictionary.add(i, new Element(this, r.value[i].ELEMENT));
    }
    return dictionary.Items();
};

WebDriver.prototype.Close = function() {
    var api = '/session/' + this.sessionId
    return this.request('DELETE', api);
};

/* Elementオブジェクト */
var Element = function(driver, elementId) {
    this.driver = driver;
    this.elementId = elementId;
};

Element.prototype.Click = function() {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/click';
    return this.driver.request('POST', api);
};

Element.prototype.SetValue = function(value) {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/value';
    var body = {"value": [value]};
    return this.driver.request('POST', api, body);
};

Element.prototype.GetValue = function() {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/value';
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.GetText = function() {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/text';
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.GetAttribute = function(attribute) {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/attribute/' + attribute;
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.IsSelected = function() {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/selected';
    r = this.driver.request('GET', api);
    return r.value;
};

Element.prototype.FindElement = function(selector) {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/element';
    var body = {
        "using": "css",
        "value": selector
    };
    r = this.driver.request('POST', api, body);
    return new Element(this.driver, r.value.ELEMENT);
};

Element.prototype.FindElements = function(selector) {
    var api = '/session/' + this.driver.sessionId + '/element/' + this.elementId + '/elements';
    var body = {
        "using": "css",
        "value": selector
    };
    r = this.driver.request('POST', api, body);
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        dictionary.add(i, new Element(this.driver, r.value[i].ELEMENT));
    }
    return dictionary.Items();
};
    endtextblock
    
    function GetError()
        result = ""
        with ScriptControl.Error
            result = result + "Number      :" + .Number + "<#CR>"
            result = result + "Source      :" + .Source + "<#CR>"
            result = result + "Description :" + .Description + "<#CR>"
            result = result + "HelpFile    :" + .HelpFile + "<#CR>"
            result = result + "HelpContext :" + .HelpContext + "<#CR>"
            result = result + "Text        :" + .Text + "<#CR>"
            result = result + "Line        :" + .Line + "<#CR>"
            result = result + "Column      :" + .Column
        endwith
    fend

endmodule

module Process
    dim locator

    procedure Process
        locator = createoleobj("WbemScripting.SWbemLocator")
    fend
    
    function Find(cmd)
        service = locator.ConnectServer()
        cmd = replace(cmd, "\", "\\")
        q = service.ExecQuery("select CommandLine from win32_process where CommandLine like '%" + cmd + "%'")
        result = q.Count
    fend
    
    function FindListeningPort(port)
        service = locator.ConnectServer(".", "Root\StandardCimv2")
        q = service.ExecQuery("select LocalPort from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
        result = q.Count
    fend
    

    function Wait(port, timeout = 10)
        limit = gettime() + timeout
        repeat
            if gettime() > limit then
                result = FALSE
                exit
            else
                sleep(0.5)
            endif
        until FindListeningPort(port) > 0
        result = TRUE
    fend
endmodule

module JSON
    procedure JSON
        if fopen("json2.js", F_EXISTS) then
            fid = fopen("json2.js", F_READ)
            json2 = fget(fid, F_ALLTEXT)
            fclose(fid)
        else
            msgbox("json2.jsがありません")
            exitexit
        endif
        ScriptControl = createoleobj("ScriptControl")
        with ScriptControl
            .Language = "JScript"
            .ExecuteStatement(json2)
            .ExecuteStatement(Statement)
            CodeObject = .CodeObject
        endwith
        json2 = EMPTY
    fend
    
    dim ScriptControl,CodeObject

    function Parse(str)
        try
            result = CodeObject.JSON.parse(str)
        except
            result = NOTHING
        endtry
    fend
    
    function Stringify(json, indent = "", CRLF = FALSE)
        try
            result = CodeObject.JSON.stringify(json, null, indent)
            if CRLF then
                result = replace(result, chr(10), "<#CR>")
            endif
        except
            result = EMPTY
        endtry
    fend

    function AddObject(base, name, value)
        try
            CodeObject.Add(base, name, value)
            result = TRUE
        except
            result = FALSE
        endtry
    fend
    
    function ReadFromFile(path)
        result = EMPTY
        if ! fopen(path, F_EXISTS) then exit

        fid = fopen(path, F_READ)
        str = fget(fid, F_ALLTEXT)
        fclose(fid)
        result = Parse(str)
    fend

    function SaveToFile(path, json, indent = "", writemode = F_WRITE8)
        result = FALSE
        str = Stringify(json, indent)
        if str = EMPTY then exit
        fid = fopen(path, writemode)
        if fid = -1 then exit
        fput(fid, str, F_ALLTEXT)
        if ! fclose(fid) then exit
        result = TRUE
    fend

    textblock Statement
        // 配列アクセス用
        // 第二引数に値を渡した場合は代入、省略した場合は値取得
        Array.prototype.Item = function(i, value)
        {
            if (! value)
                return this[i];
            this[i] = value;
        }
        Array.prototype.item = Array.prototype.Item;

        // Object追加用、AddObject()で使う
        function Add(obj, name, value)
        {
            obj[name] = value;
        }

        Object.prototype.GetValue = function(name)
        {
            return this[name];
        }
    endtextblock
    
endmodule

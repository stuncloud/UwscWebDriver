
module WebDriver
    const MODULE_VERSION = "0.3.0"

    dim debug = FALSE
    const Chrome  = "chromedriver.exe"
    const Firefox = "geckodriver.exe"
    const Edge    = "MicrosoftWebDriver.exe"

    dim ScriptControl,CodeObject
    procedure WebDriver
        if fopen("json2.js", F_EXISTS) then
            fid = fopen("json2.js", F_READ)
            json2 = fget(fid, F_ALLTEXT)
            fclose(fid)
        else
            msgbox("json2.jsがありません")
            exitexit
        endif

        ScriptControl = createoleobj("ScriptControl")
        try
            with ScriptControl
                .Language = "JScript"
                .ExecuteStatement(json2)
                .ExecuteStatement(jsStatement)
                CodeObject = .CodeObject
            endwith
        except
            e = ScriptControl.Error
            if e.number then
                msg = ""
                msg = msg + TRY_ERRLINE + "<#CR>"
                msg = msg + TRY_ERRMSG + "<#CR>"
                msg = msg + e.Source + " (" + e.Number + ")" + "<#CR>"
                msg = msg + e.Description + "<#CR>"
                msg = msg + "[Line: " + e.Line + "] " + e.Text + "<#CR>"
                msgbox(msg)
            endif
            exitexit
        endtry
        json2 = EMPTY
    fend

    procedure Debug(b = TRUE)
        debug = b
    fend
    
    function Version()
        result = MODULE_VERSION
    fend
    
    
    function Start(driverpath, port = 9515, capabilities = EMPTY)
        driverversion = trim(doscmd(driverpath + " --version 2> NUL"))

        if ! length(driverversion) then
            result = null
            msgbox("WebDriverが見つかりません: " + driverpath)
            exit
        endif

        dim verbose = ""

        select TRUE
            case pos(Chrome, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = ChromeCapabilities
                endif
                if this.debug then verbose = " --verbose"
            case pos(Edge, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = EdgeCapabilities
                endif
                if this.debug then verbose = " --verbose"
            case pos(Firefox, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = ChromeCapabilities
                endif
                if this.debug then verbose = " -v"
            default
                if capabilities = EMPTY then
                    msgbox("Capabilityを指定してください")
                    exitexit
                endif
        selend
        
        cmd = "<#DBL>" + driverpath + "<#DBL> --port=" + port + verbose
        if ! Process.Find(cmd) then
            doscmd(cmd, TRUE, TRUE)
            if ! Process.Wait(port) then
                result = null
                msgbox("WebDriverが起動していません")
                exit
            endif
        endif
        sleep(2)
        uri = "http://localhost:" + port
        result = CodeObject.WebDriver.Start(uri, capabilities, debug)
    fend

    function Remote(remotehost, port, capabilities)
        uri = "http://" + remotehost + ":" + port + "/wd/hub"
        result = CodeObject.WebDriver.Start(uri, capabilities, debug)
    fend
    
    function Connect(session)
        try
            s = split(session, "|", TRUE)
            result = CodeObject.WebDriver.Connect(s[0], s[1], debug)
        except
            result = NULL
        endtry
    fend

    function CreateJSArray()
        result = CodeObject.WebDriver.NewJSArray()
    fend
    
    function ParseJson(json)
        result = CodeObject.JSON.parse(json)
    fend
    

    function GetLog()
        result = CodeObject.WebDriver.GetLog()
    fend

    function ClearLog()
        result = CodeObject.WebDriver.ClearLog()
    fend
    
    textblock EdgeCapabilities
        {
            "capabilities": {}
        }
    endtextblock
    
    textblock ChromeCapabilities
        {
            "desiredCapabilities": {},
            "requiredCapabilities": {}
        }
    endtextblock
    
    textblock RemoteEdgeCapabilities
        {
            "desiredCapabilities": {
                "browserName": "MicrosoftEdge",
            }
        }
    endtextblock

    textblock RemoteChromeCapabilities
        {
            "desiredCapabilities": {
                "browserName": "chrome",
                "goog:chromeOptions": {}
            }
        }
    endtextblock
    

    textblock jsStatement
/* WebDriverオブジェクト */
var WebDriver = function(sessionId, uribase, debug) {
    this.uribase = uribase;
    this.sessionId = sessionId;
    this.debug = debug;
    this.apibase = '/session/' + this.sessionId;
};

WebDriver.prototype.GetSession = function() {
    return this.sessionId + '|' + this.uribase
};

WebDriver.Start = function(uribase, capabilities, debug) {
    if (capabilities)
        capabilities = JSON.parse(capabilities);
    var uri = uribase + '/session';
    var body = capabilities;
    r = WebDriver._request('POST', uri, body, debug);
    if (r) {
        var sessionId = r.sessionId ? r.sessionId: r.value.sessionId;
        var d = new WebDriver(sessionId, uribase, debug);
        d.SetImplicitWait(10000);
        return d;
    }
    return null;
};

WebDriver.Connect = function(sessionId, uribase, debug) {
    var d = new WebDriver(sessionId, uribase, debug);
    // apiが通れば再接続成功
    var r = d.request('GET', d.apibase + '/url');
    if (! r)
        return null; // edge, firefoxでエラー
    if (r.status)
        return null; // chromeでエラー
    return d;
};

WebDriver.Log = [];
WebDriver.GetLog = function() {
    var d = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < WebDriver.Log.length; i++) {
        d.add(i, WebDriver.Log[i]);
    }
    return d.Items();
}

WebDriver.ClearLog = function() {
    WebDriver.Log = [];
}

WebDriver.NewJSArray = function() {
    return [];
}

WebDriver.Contains = function(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === value)
            return true;
    }
    return false;
}

WebDriver.ConvertToSaveArray = function(arr) {
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < arr.length; i++) {
        dictionary.add(i, arr[i]);
    }
    return dictionary.Items();
}

WebDriver._request = function(method, uri, body, debug) {
    var xhr = new ActiveXObject("Msxml2.XMLHTTP");
    xhr.open(method, uri, false);
    xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
    strbody = body ? JSON.stringify(body): null;
    xhr.send(strbody);
    if (debug) {
        WebDriver.Log.push({
            "api": uri,
            "body": strbody,
            "status": xhr.status,
            "statusText": xhr.statusText,
            "response": xhr.responseText
        });
    }
    if (xhr.status === 200) {
        return JSON.parse(xhr.responseText);
    }
    return null;
};

WebDriver.prototype.request = function(method, api, body) {
    var uri = this.uribase + api;
    return WebDriver._request(method, uri, body, this.debug);
};

WebDriver.prototype.SetImplicitWait = function(millisec) {
    var api = this.apibase + '/timeouts';
    var body = {"implicit": millisec};
    return this.request('POST', api, body);
};

WebDriver.prototype.Navigate = function(url, target) {
    var api = this.apibase + '/url';
    var body = {"url": url};
    if (! target) {
        return this.request('POST', api, body);
    }
    var script = "var tmp = document.createElement('a');"
               + "tmp.href = arguments[0];"
               + "tmp.target = arguments[1];"
               + "tmp.click();"
               + "tmp = null;";
    var args = [url, target];
    return this.ExecuteScript(script, args);
};

WebDriver.prototype.Reload = function() {
    var api = this.apibase + '/refresh';
    var body = {"url": ""};
    this.request('POST', api, body);
};

WebDriver.prototype.SwitchWindow = function(handleOrName) {
    var handles = this._getWindowHandles();
    var api = this.apibase + '/window';
    var body, name
    if (WebDriver.Contains(handles, handleOrName)) {
        body = {
            "handle": handleOrName,
            "name": ""
        };
        this.request('POST', api, body);
        var r = this.request('GET', api);
        if (r)
            return r.value;
    } else {
        for (var i = 0; i < handles.length; i++) {
            body = {
                "handle": handles[i],
                "name": handleOrName
            };
            this.request('POST', api, body);
            name = this.ExecuteScript('return window.name;');
            if (name == handleOrName) {
                var r = this.request('GET', api);
                if (r)
                    return r.value;
            }
        }
    }
    return null;
};

WebDriver.prototype.GetCurrentWindowHandle = function() {
    var api = this.apibase + '/window';
    var r = this.request('GET', api);
    return r.value;
};

WebDriver.prototype._getWindowHandles = function() {
    var api = this.apibase + '/window/handles';
    var r = this.request('GET', api);
    if (r)
        return r.value;
    return [];
};

WebDriver.prototype.GetWindowHandles = function() {
    var handles = this._getWindowHandles();
    return WebDriver.ConvertToSaveArray(handles);
};

WebDriver.prototype.GetUrl = function() {
    var api = this.apibase + '/url';
    var r = this.request('GET', api);
    if (r)
        return r.value;
};

WebDriver.prototype.GetTitle = function() {
    var api = this.apibase + '/title';
    var r = this.request('GET', api);
    if (r)
        return r.value;
};

WebDriver.prototype.GetSource = function() {
    var api = this.apibase + '/source';
    var r = this.request('GET', api);
    if (r)
        return r.value;
};

WebDriver.prototype.FindElement = function(selector) {
    var api = this.apibase + '/element';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.request('POST', api, body);
    if (r.value.ELEMENT) {
        return new Element(this, r.value.ELEMENT, r.value);
    } else {
        for (var key in r.value) {
            if (key.match(/element/)) {
                return new Element(this, r.value[key], r.value);
            }
        }
    }
    return null;
};

WebDriver.prototype.FindElements = function(selector) {
    var api = this.apibase + '/elements';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        var eid;
        if (r.value[i].ELEMENT) {
            eid = r.value[i].ELEMENT;
        } else {
            for (var key in r.value[i]) {
                if (key.match(/element/)) {
                    eid = r.value[i][key];
                    break
                }
            }
        }
        dictionary.add(i, new Element(this, eid, r.value[i]));
    }
    return dictionary.Items();
};

WebDriver.prototype.FindElementsByName = function(name) {
    return this.FindElements('*[name="' + name + '"]');
};

WebDriver.prototype.Close = function() {
    var api = this.apibase;
    return this.request('DELETE', api);
};

WebDriver.prototype.GetDialogText = function() {
    var api = this.apibase + '/alert/text';
    var r = this.request('GET', api);
    if (r) {
        if (r.value.error)
            return null;
        return r.value;
    }
};

WebDriver.prototype.SetDialogText = function(value) {
    var api = this.apibase + '/alert/text';
    var body = {
        text: value,
        value: value.split('')
    };
    this.request('POST', api, body);
    return null;
};

WebDriver.prototype.AcceptDialog = function() {
    var api = this.apibase + '/alert/accept';
    var body = {};
    this.request('POST', api, body);
    return;
};

WebDriver.prototype.DismissDialog = function() {
    var api = this.apibase + '/alert/dismiss';
    var body = {};
    this.request('POST', api, body);
    return;
};

WebDriver.prototype.SaveScreenshot = function(path) {
    var api = this.apibase + '/screenshot';
    var r = this.request('GET', api);
    WebDriver._saveScreenshot(r.value, path);
};

WebDriver.prototype.ExecuteScript = function(js, args) {
    var api = this.apibase + '/execute/sync';
    args = args || [];
    var body = {
        "script": js,
        "args": args
    };
    var r = this.request('POST', api, body);
    if (r)
        return r.value;
};

WebDriver._saveScreenshot = function(base64, path) {
    var xmldom = new ActiveXObject('Microsoft.XMLDOM');
    var elem = xmldom.createElement("base64");
    elem.dataType = "bin.base64";
    elem.text = base64;
    bin = elem.nodeTypedValue;

    var stream = new ActiveXObject('ADODB.Stream');
    stream.Open()
    stream.Type = 1 // adTypeBinary
    stream.Write(bin)
    stream.SaveToFile(path, 2) // adSaveCreateOverWrite
    stream.Close()
}

/* Elementオブジェクト */
var Element = function(driver, elementId, elementObject) {
    this.driver = driver;
    this.elementId = elementId;
    this.object = elementObject;
    this.apibase = '/session/' + this.driver.sessionId + '/element/' + this.elementId;
};

Element.prototype.raw = function() {
    return this.object;
};

Element.prototype.Click = function() {
    var api = this.apibase + '/click';
    var body = {};
    return this.driver.request('POST', api, body);
};

Element.prototype.Clear = function() {
    var api = this.apibase + '/clear';
    var body = {};
    return this.driver.request('POST', api, body);
};

Element.prototype.SetValue = function(value) {
    var api = this.apibase + '/value';
    var body = {
        text: value,
        value: value.split('')
    };
    return this.driver.request('POST', api, body);
};

Element.prototype.GetValue = function() {
    return this.GetAttribute('value') || this.driver.ExecuteScript('return arguments[0].value;', [this.object]);
};

Element.prototype.GetText = function() {
    var api = this.apibase + '/text';
    var r = this.driver.request('GET', api);
    if (r)
        return r.value;
};

Element.prototype.GetAttribute = function(attribute) {
    var api = this.apibase + '/attribute/' + attribute;
    var body = {};
    var r = this.driver.request('GET', api, body);
    if (r.value)
        return r.value;
    var js = 'return arguments[0].getAttribute(arguments[1]);';
    var args = [this.raw(), attribute]
    return this.driver.ExecuteScript(js, args);
};

Element.prototype.IsSelected = function() {
    var api = this.apibase + '/selected';
    var r = this.driver.request('GET', api);
    if (r)
        return r.value;
};

Element.prototype.FindElement = function(selector) {
    var api = this.apibase + '/element';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.driver.request('POST', api, body);
    if (r.value.ELEMENT) {
        return new Element(this.driver, r.value.ELEMENT, r.value);
    } else {
        for (var key in r.value) {
            if (key.match(/element/)) {
                return new Element(this.driver, r.value[key], r.value);
            }
        }
    }
    return null;
};

Element.prototype.FindElements = function(selector) {
    var api = this.apibase + '/elements';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.driver.request('POST', api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        var eid;
        if (r.value[i].ELEMENT) {
            eid = r.value[i].ELEMENT;
        } else {
            for (var key in r.value[i]) {
                if (key.match(/element/)) {
                    eid = r.value[i][key];
                    break
                }
            }
        }
        dictionary.add(i, new Element(this.driver, eid, r.value[i]));
    }
    return dictionary.Items();
};

Element.prototype.SaveScreenshot = function(path) {
    var api = this.apibase + '/screenshot'
    var r = this.driver.request('GET', api);
    WebDriver._saveScreenshot(r.value, path);
};

    endtextblock
    
    function GetError()
        result = ""
        with ScriptControl.Error
            if .Number then
                result = result + "Number      :" + .Number + "<#CR>"
                result = result + "Source      :" + .Source + "<#CR>"
                result = result + "Description :" + .Description + "<#CR>"
                // result = result + "HelpFile    :" + .HelpFile + "<#CR>"
                // result = result + "HelpContext :" + .HelpContext + "<#CR>"
                result = result + "Text        :" + .Text + "<#CR>"
                result = result + "Line        :" + .Line + "<#CR>"
                result = result + "Column      :" + .Column
            endif
        endwith
    fend

endmodule

module Process
    dim locator

    procedure Process
        locator = createoleobj("WbemScripting.SWbemLocator")
    fend
    
    function Find(cmd)
        service = locator.ConnectServer()
        cmd = replace(cmd, "\", "\\")
        q = service.ExecQuery("select CommandLine from win32_process where CommandLine like '%" + cmd + "%'")
        result = q.Count
    fend
    
    function FindListeningPort(port)
        service = locator.ConnectServer(".", "Root\StandardCimv2")
        q = service.ExecQuery("select LocalPort from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
        result = q.Count
    fend
    

    function Wait(port, timeout = 10)
        limit = gettime() + timeout
        repeat
            if gettime() > limit then
                result = FALSE
                exit
            else
                sleep(0.5)
            endif
        until FindListeningPort(port) > 0
        result = TRUE
    fend
endmodule

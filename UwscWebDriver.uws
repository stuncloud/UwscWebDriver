
module WebDriver
    const MODULE_VERSION = "0.4.0"

    dim debug = FALSE
    dim showcmd = TRUE
    const Chrome       = "chromedriver.exe"
    const Firefox      = "geckodriver.exe"
    const Edge         = "msedgedriver.exe"
    const ChromiumEdge = "msedgedriver.exe"
    const EdgeLegacy   = "MicrosoftWebDriver.exe"

    dim ScriptControl,CodeObject
    procedure WebDriver
        ScriptControl = createoleobj("ScriptControl")
        try
            with ScriptControl
                .Language = "JScript"
                .ExecuteStatement(json2)
                .ExecuteStatement(jsStatement)
                CodeObject = .CodeObject
            endwith
        except
            e = ScriptControl.Error
            if e.number then
                msg = ""
                msg = msg + TRY_ERRLINE + "<#CR>"
                msg = msg + TRY_ERRMSG + "<#CR>"
                msg = msg + e.Source + " (" + e.Number + ")" + "<#CR>"
                msg = msg + e.Description + "<#CR>"
                msg = msg + "[Line: " + e.Line + "] " + e.Text + "<#CR>"
                msgbox(msg)
            endif
            exitexit
        endtry
    fend

    procedure Debug(b = TRUE)
        debug = b
    fend
    
    function Version()
        result = MODULE_VERSION
    fend
    
    procedure HideCmd()
        showcmd = FALSE
    fend

    function Chrome(port = 9515, capabilities = ChromeCapabilities)
        result = Start(Chrome, port, capabilities)
    fend
    
    function ChromiumEdge(port = 9515, capabilities = ChromeCapabilities)
        result = Start(ChromiumEdge, port, capabilities)
    fend
    
    function Edge(port = 9515, capabilities = ChromeCapabilities)
        result = Start(ChromiumEdge, port, capabilities)
    fend
    
    function EdgeLegacy(port = 9515, capabilities = EdgeCapabilities)
        result = Start(EdgeLegacy, port, capabilities)
    fend
    
    function Firefox(port = 9515, capabilities = ChromeCapabilities)
        result = Start(Firefox, port, capabilities)
    fend
    

    function Start(driverpath, port = 9515, capabilities = EMPTY)
        driverversion = trim(doscmd(driverpath + " --version 2> NUL"))

        if ! length(driverversion) then
            result = null
            msgbox("WebDriverが見つかりません: " + driverpath)
            exit
        endif

        dim verbose = ""

        select TRUE
            case pos(Chrome, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = ChromeCapabilities
                endif
                if this.debug then verbose = " --verbose"
            case pos(ChromiumEdge, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = ChromeCapabilities
                endif
                if this.debug then verbose = " --verbose"
            case pos(EdgeLegacy, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = EdgeCapabilities
                endif
                if this.debug then verbose = " --verbose"
            case pos(Firefox, driverpath) > 0
                if capabilities = EMPTY then
                    capabilities = ChromeCapabilities
                endif
                if this.debug then verbose = " -v"
            default
                if capabilities = EMPTY then
                    msgbox("Capabilityを指定してください")
                    exitexit
                endif
        selend
        
        cmd = "<#DBL>" + driverpath + "<#DBL> --port=" + port + verbose
        if ! Process.Find(cmd) then
            doscmd(cmd, TRUE, showcmd)
            if ! Process.Wait(port) then
                result = null
                msgbox("WebDriverが起動していません")
                exit
            endif
        endif
        sleep(2)
        uri = "http://localhost:" + port
        result = CodeObject.WebDriver.Start(uri, capabilities, debug)
    fend

    function Remote(remotehost, port, capabilities)
        uri = "http://" + remotehost + ":" + port + "/wd/hub"
        result = CodeObject.WebDriver.Start(uri, capabilities, debug)
    fend
    
    function Connect(session)
        try
            result = CodeObject.WebDriver.Connect(session, debug)
        except
            result = NULL
        endtry
    fend

    function CreateJSArray()
        result = CodeObject.WebDriver.NewJSArray()
    fend
    
    function ParseJson(json)
        result = CodeObject.JSON.parse(json)
    fend

    function StringifyJson(obj)
        result = CodeObject.JSON.stringify(obj)
    fend

    function GetLog()
        result = CodeObject.WebDriver.GetLog()
    fend

    function ClearLog()
        result = CodeObject.WebDriver.ClearLog()
    fend
    
    textblock EdgeCapabilities
        {
            "capabilities": {}
        }
    endtextblock
    
    textblock ChromeCapabilities
        {
            "desiredCapabilities": {},
            "requiredCapabilities": {}
        }
    endtextblock
    
    textblock RemoteEdgeCapabilities
        {
            "desiredCapabilities": {
                "browserName": "MicrosoftEdge",
            }
        }
    endtextblock

    textblock RemoteChromeCapabilities
        {
            "desiredCapabilities": {
                "browserName": "chrome",
                "goog:chromeOptions": {}
            }
        }
    endtextblock
    

    textblock jsStatement
/* WebRequestオブジェクト */
var WebRequest = function(uribase) {
    this.uribase = uribase;
}
WebRequest.debug = false;
WebRequest.send = function(method, uri, body) {
    var xhr = new ActiveXObject("Msxml2.XMLHTTP");
    xhr.open(method, uri, false);
    xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
    strbody = body ? JSON.stringify(body): null;
    xhr.send(strbody);
    if (WebRequest.debug) {
        WebDriver.Log.push({
            "api": uri,
            "body": strbody,
            "status": xhr.status,
            "statusText": xhr.statusText,
            "response": xhr.responseText
        });
    }
    if (xhr.status === 200) {
        return JSON.parse(xhr.responseText);
    }
    return null;
};
WebRequest.prototype.Get = function(api) {
    var uri = this.uribase + api;
    return WebRequest.send('GET', uri, null);
}
WebRequest.prototype.Post = function(api, body) {
    var uri = this.uribase + api;
    return WebRequest.send('POST', uri, body);
}
WebRequest.prototype.Put = function(api, body) {
    var uri = this.uribase + api;
    return WebRequest.send('PUT', uri, body);
}
WebRequest.prototype.Delete = function(api) {
    var uri = this.uribase + api;
    return WebRequest.send('DELETE', uri, null);
}

/* WebDriverオブジェクト */
var WebDriver = function(sessionId, uribase, capabilities) {
    this.uribase = uribase;
    this.sessionId = sessionId;
    this.capabilities = capabilities;
    var apibase = uribase + '/session/' + this.sessionId;
    this.request = new WebRequest(apibase);
};

WebDriver.prototype.GetSession = function() {
    return [
        this.sessionId,
        this.uribase,
        this.GetBrowserName(),
        this.GetBrowserVersion()
    ].join('|');
};

WebDriver.Start = function(uribase, capabilities, debug) {
    WebRequest.debug = debug;
    if (capabilities)
        capabilities = JSON.parse(capabilities);
    var uri = uribase + '/session';
    var body = capabilities;
    r = WebRequest.send('POST', uri, body);
    if (r) {
        var sessionId = r.sessionId ? r.sessionId: r.value.sessionId;
        var d = new WebDriver(sessionId, uribase, (r.value.capabilities || r.value));
        d.SetImplicitWait(10000);
        return d;
    }
    return null;
};

WebDriver.Connect = function(sessionString, debug) {
    WebRequest.debug = debug;
    var s = sessionString.split('|');
    var d = new WebDriver(s[0], s[1], {
        browserName: s[2],
        browserVersion: s[3]
    });
    // apiが通れば再接続成功
    var r = d.request.Get('/url');
    if (! r)
        return null; // edge, firefoxでエラー
    if (r.status)
        return null; // chromeでエラー
    return d;
};

WebDriver.Log = [];
WebDriver.GetLog = function() {
    var d = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < WebDriver.Log.length; i++) {
        d.add(i, WebDriver.Log[i]);
    }
    return d.Items();
}

WebDriver.ClearLog = function() {
    WebDriver.Log = [];
}

WebDriver.NewJSArray = function() {
    return [];
}

WebDriver.Contains = function(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === value)
            return true;
    }
    return false;
}

WebDriver.ConvertToSafeArray = function(arr) {
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < arr.length; i++) {
        dictionary.add(i, arr[i]);
    }
    return dictionary.Items();
}

WebDriver.prototype.GetBrowserName = function() {
    return this.capabilities.browserName;
};

WebDriver.prototype.GetBrowserVersion = function() {
    return this.capabilities.browserVersion || this.capabilities.version;
};

WebDriver.prototype.SetImplicitWait = function(millisec) {
    var api = '/timeouts';
    var body = {"implicit": millisec};
    return this.request.Post(api, body);
};

WebDriver.prototype.Navigate = function(url, target) {
    var api = '/url';
    var body = {"url": url};
    if (! target) {
        return this.request.Post(api, body);
    }
    var js = "var tmp = document.createElement('a');"
           + "tmp.href = arguments[0];"
           + "tmp.target = arguments[1];"
           + "tmp.click();"
           + "tmp = null;";
    return this.ExecuteScript(js, [url, target]);
};

WebDriver.prototype.Reload = function() {
    var api = '/refresh';
    var body = {"url": ""};
    this.request.Post(api, body);
};

WebDriver.prototype.SwitchWindow = function(handleOrName) {
    var handles = this._getWindowHandles();
    var api = '/window';
    var body, name
    if (WebDriver.Contains(handles, handleOrName)) {
        body = {
            "handle": handleOrName,
            "name": ""
        };
        this.request.Post(api, body);
        var r = this.request.Get(api);
        if (r)
            return r.value;
    } else {
        for (var i = 0; i < handles.length; i++) {
            body = {
                "handle": handles[i],
                "name": handleOrName
            };
            this.request.Post(api, body);
            name = this.ExecuteScript('return window.name;');
            if (name == handleOrName) {
                var r = this.request.Get(api);
                if (r)
                    return r.value;
            }
        }
    }
    return null;
};

WebDriver.prototype.GetCurrentWindowHandle = function() {
    var api = '/window';
    var r = this.request.Get(api);
    return r.value;
};

WebDriver.prototype._getWindowHandles = function() {
    var api = '/window/handles';
    var r = this.request.Get(api);
    if (r)
        return r.value;
    return [];
};

WebDriver.prototype.GetWindowHandles = function() {
    var handles = this._getWindowHandles();
    return WebDriver.ConvertToSafeArray(handles);
};

WebDriver.prototype.GetUrl = function() {
    var api = '/url';
    var r = this.request.Get(api);
    if (r)
        return r.value;
};

WebDriver.prototype.GetTitle = function() {
    var api = '/title';
    var r = this.request.Get(api);
    if (r)
        return r.value;
};

WebDriver.prototype.GetSource = function() {
    var api = '/source';
    var r = this.request.Get(api);
    if (r)
        return r.value;
};

WebDriver.prototype.find_single_elem = function(body) {
    var api = '/element';
    var r = this.request.Post(api, body);
    var eid;
    if (r.value.ELEMENT) {
        eid = r.value.ELEMENT;
    } else {
        for (var key in r.value) {
            if (key.match(/element/)) {
                eid = r.value[key];
                break;
            }
        }
    }
    if (eid) {
        return new WebElement(this.request.uribase, eid, r.value);
    }
    return null;
};

WebDriver.prototype.find_multi_elem = function(body) {
    var api = '/elements';
    var r = this.request.Post(api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        var eid;
        if (r.value[i].ELEMENT) {
            eid = r.value[i].ELEMENT;
        } else {
            for (var key in r.value[i]) {
                if (key.match(/element/)) {
                    eid = r.value[i][key];
                    break
                }
            }
        }
        var element = new WebElement(this.request.uribase, eid, r.value[i]);
        dictionary.add(i, element);
    }
    return dictionary.Items();
};

WebDriver.prototype.FindElement = function(selector) {
    var body = {
        "using": "css selector",
        "value": selector
    };
    return this.find_single_elem(body);
};

WebDriver.prototype.FindElements = function(selector) {
    var body = {
        "using": "css selector",
        "value": selector
    };
    return this.find_multi_elem(body);
};

WebDriver.prototype.FindElementsByName = function(name) {
    return this.FindElements('*[name="' + name + '"]');
};

WebDriver.prototype.FindElementByXPath = function(xpath) {
    var body = {
        "using": "xpath",
        "value": xpath
    };
    return this.find_single_elem(body);
};

WebDriver.prototype.FindElementsByXPath = function(xpath) {
    var body = {
        "using": "xpath",
        "value": xpath
    };
    return this.find_multi_elem(body);
};

WebDriver.prototype.Close = function() {
    var api = '';
    this.request.Delete(api);
};

WebDriver.prototype.GetDialogText = function() {
    var api = '/alert/text';
    var r = this.request.Get(api);
    if (r) {
        if (r.value.error)
            return null;
        return r.value;
    }
};

WebDriver.prototype.SetDialogText = function(value) {
    var api = '/alert/text';
    var body = {
        text: value,
        value: value.split('')
    };
    this.request.Post(api, body);
};

WebDriver.prototype.AcceptDialog = function() {
    var api = '/alert/accept';
    var body = {};
    this.request.Post(api, body);
};

WebDriver.prototype.DismissDialog = function() {
    var api = '/alert/dismiss';
    var body = {};
    this.request.Post(api, body);
};

WebDriver.prototype.SaveScreenshot = function(path) {
    var api = '/screenshot';
    var r = this.request.Get(api);
    WebDriver._saveScreenshot(r.value, path);
};

WebDriver.ExecuteScript = function(driverapibase, js, args) {
    var url = driverapibase + '/execute/sync';
    args = args || [];
    var body = {
        "script": js,
        "args": args
    };
    var r = WebRequest.send('POST', url, body);
    if (r)
        return r.value;
};

WebDriver.prototype.ExecuteScript = function(js, args) {
    return WebDriver.ExecuteScript(this.request.uribase, js, args)
};

WebDriver._saveScreenshot = function(base64, path) {
    var xmldom = new ActiveXObject('Microsoft.XMLDOM');
    var elem = xmldom.createElement("base64");
    elem.dataType = "bin.base64";
    elem.text = base64;
    bin = elem.nodeTypedValue;

    var stream = new ActiveXObject('ADODB.Stream');
    stream.Open()
    stream.Type = 1 // adTypeBinary
    stream.Write(bin)
    stream.SaveToFile(path, 2) // adSaveCreateOverWrite
    stream.Close()
}

WebDriver.prototype.GetRect = function() {
    var api = '/window/rect';
    var r = this.request.Get(api);
    if (r.value.x !== null)
        return r.value;
};

WebDriver.prototype.SetRect = function(width, height, x, y) {
    var api = '/window/rect';
    var body = {
        "width": width,
        "height": height,
        "x": x,
        "y": y
    }
    var r = this.request.Post(api, body);
    if (r.value.x !== null)
        return r.value;
};

WebDriver.prototype.Maximize = function() {
    var api = '/window/maximize';
    var body = {}
    var r = this.request.Post(api, body);
    if (r.value.x !== null)
        return r.value;
};

WebDriver.prototype.Minimize = function() {
    var api = '/window/minimize';
    var body = {}
    var r = this.request.Post(api, body);
    if (r.value.x !== null)
        return r.value;
};

WebDriver.prototype.Fullscreen = function() {
    var api = '/window/fullscreen';
    var body = {}
    var r = this.request.Post(api, body);
    if (r.value.x !== null)
        return r.value;
};

/* WebElementオブジェクト */
var WebElement = function(driverapibase, elementId, elementObject) {
    this.object = elementObject;
    this.elementId = elementId;
    this.driverapibase = driverapibase;
    var elementapibase = driverapibase + '/element/' + elementId;
    this.request = new WebRequest(elementapibase)
};

WebElement.prototype.raw = function() {
    return this.object;
};

WebElement.prototype.Click = function() {
    var api = '/click';
    var body = {};
    this.request.Post(api, body);
};

WebElement.prototype.Clear = function() {
    var api = '/clear';
    var body = {};
    this.request.Post(api, body);
};

WebElement.prototype.SetValue = function(value) {
    var api = '/value';
    var body = {
        text: value,
        value: value.split('')
    };
    this.request.Post(api, body);
};

WebElement.prototype.GetValue = function() {
    return this.GetAttribute('value');
};

WebElement.prototype.GetText = function() {
    var api = '/text';
    var r = this.request.Get(api);
    if (r)
        return r.value;
};

WebElement.prototype.GetAttribute = function(attribute) {
    var api = '/attribute/' + attribute;
    var body = {};
    var r = this.request.Get(api, body);
    if (r.value)
        return r.value;
    var js = 'return arguments[0].getAttribute(arguments[1]);';
    var args = [this.raw(), attribute]
    return this.ExecuteScript(js, args);
};

WebElement.prototype.IsSelected = function() {
    var api = '/selected';
    var r = this.request.Get(api);
    if (r)
        return r.value;
};

WebElement.prototype.FindElement = function(selector) {
    var api = '/element';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.request.Post(api, body);
    var eid, element;
    if (r.value.ELEMENT) {
        eid = r.value.ELEMENT;
    } else {
        for (var key in r.value) {
            if (key.match(/element/)) {
                eid = r.value[key];
                break;
            }
        }
    }
    if (eid) {
        element = new WebElement(this.driverapibase, eid, r.value);
    }
    return element;
};

WebElement.prototype.FindElements = function(selector) {
    var api = '/elements';
    var body = {
        "using": "css selector",
        "value": selector
    };
    var r = this.request.Post(api, body);
    if (! r && r.status != 0)
        return null;
    var dictionary = new ActiveXObject("Scripting.Dictionary");
    for (var i = 0; i < r.value.length; i++) {
        var eid;
        if (r.value[i].ELEMENT) {
            eid = r.value[i].ELEMENT;
        } else {
            for (var key in r.value[i]) {
                if (key.match(/element/)) {
                    eid = r.value[i][key];
                    break
                }
            }
        }
        var element = new WebElement(this.driverapibase, eid, r.value[i]);
        dictionary.add(i, element);
    }
    return dictionary.Items();
};

WebElement.prototype.SaveScreenshot = function(path) {
    var api = '/screenshot'
    var r = this.request.Get(api);
    WebDriver._saveScreenshot(r.value, path);
};

WebElement.prototype.ExecuteScript = function(js, args) {
    return WebDriver.ExecuteScript(this.driverapibase, js, args)
};

    endtextblock
    
    function GetError()
        result = ""
        with ScriptControl.Error
            if .Number then
                result = result + "Number      :" + .Number + "<#CR>"
                result = result + "Source      :" + .Source + "<#CR>"
                result = result + "Description :" + .Description + "<#CR>"
                // result = result + "HelpFile    :" + .HelpFile + "<#CR>"
                // result = result + "HelpContext :" + .HelpContext + "<#CR>"
                result = result + "Text        :" + .Text + "<#CR>"
                result = result + "Line        :" + .Line + "<#CR>"
                result = result + "Column      :" + .Column
            endif
        endwith
    fend

endmodule

module WebDriverDownload
    function Dialog()
        result = EMPTY
        select slctbox(SLCT_BTN or SLCT_STR, 0, "ダウンロードするWebdriverを選択", "Chrome", "Firefox", "ChromiumEdge", "EdgeLegacy")
            case "ChromiumEdge"
                ver = input("Chromium Edgeのメジャーバージョンを入力<#CR>例: 83")
                if length(val(ver, EMPTY))
                    result = ChromiumEdge(ver)
                endif
            case "Chrome"
                ver = input("Google Chromeのメジャーバージョンを入力<#CR>例: 75")
                if length(val(ver, EMPTY))
                    result = Chrome(ver)
                endif
            case "Firefox"
                bit = slctbox(SLCT_BTN or SLCT_STR, 0, "Firefox<#CR>選択してください", "32bit", "64bit")
                if bit <> -1 then
                    result = Firefox(replace(bit, "bit", ""))
                endif
            case "EdgeLegacy"
                result = EdgeLegacy()
            default
        selend
    fend

    function ChromiumEdge(ver)
        result = EMPTY
        arc = "32"
        if kindofos(TRUE) then
            arc = "64"
        endif

        dl_page_url = "https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/"
        r = Request(dl_page_url)

        u1 = "https://msedgedriver.azureedge.net/" + ver
        u2 = "/edgedriver_win" + arc + ".zip"
        v = betweenstr(r.responseText, u1, u2, 1)

        if length(v) = 0 then
            msgbox("指定バージョン("+ ver +")が見つかりませんでした")
            exit
        endif

        v2 = betweenstr(v, u1, "", 1)
        if length(v2) then
            v = v2
        endif

        file_url = u1 + v + u2
        r = Request(file_url)
        if ! Save(r, "msedgedriver.zip") then
            msgbox("ダウンロードに失敗しました")
            exit
        endif

        if ! UnZip(GET_CUR_DIR + "\msedgedriver.zip", "msedgedriver.exe") then
            msgbox("zipファイルの展開に失敗しました")
            exit
        endif

        ret = doscmd("msedgedriver --version")
        result = ParseDriverVersion(ret)
    fend
    
    function EdgeLegacy()
        with createoleobj("Shell.Application")
            exe = "DISM.exe"
            args = "/Online /Add-Capability /CapabilityName:Microsoft.WebDriver~~~~0.0.1.0"
            .ShellExecute(exe, args, EMPTY, "runas", 1)
        endwith
        ret = doscmd("MicrosoftWebDriver --version")
        result = ParseDriverVersion(ret)
    fend
    
    function Chrome(major)
        latest_uri = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_" + major
        r = Request(latest_uri)
        v = trim(r.responseText)
        file_uri = "https://chromedriver.storage.googleapis.com/" + v + "/chromedriver_win32.zip"
        r = Request(file_uri)
        if ! Save(r, "chromedriver_win32.zip") then
            result = EMPTY
            exit
        endif
        if ! UnZip(GET_CUR_DIR + "\chromedriver_win32.zip", "chromedriver.exe") then
            result = EMPTY
            exit
        endif
        ret = doscmd("chromedriver --version")
        result = ParseDriverVersion(ret)
    fend
    
    function Firefox(bit)
        select bit
            case 32,64,"32","64"
            default
                result = EMPTY
                exit
        selend
        tags_uri = "https://api.github.com/repos/mozilla/geckodriver/tags"
        s = Request(tags_uri)
        latest = betweenstr(s.responseText, "<#DBL>name<#DBL>:<#DBL>", "<#DBL>,", 1)
        file_uri = "https://github.com/mozilla/geckodriver/releases/download/" + latest + "/geckodriver-" + latest + "-win" + bit + ".zip"
        r = Request(file_uri, TRUE)
        if ! Save(r, "geckodriver-" + latest + "-win" + bit + ".zip") then
            result = EMPTY
            exit
        endif
        if ! UnZip(GET_CUR_DIR + "\geckodriver-" + latest + "-win" + bit + ".zip", "geckodriver.exe") then
            result = EMPTY
            exit
        endif
        ret = doscmd("geckodriver --version")
        result = ParseDriverVersion(ret)
    fend
    
    function ParseDriverVersion(str)
        with createoleobj("VBScript.RegExp")
            .pattern = "\d+\.\d+\.\d+(\.\d+)?"
            m = .Execute(str)
            if m.count then
                result =  m.item(0).value
            else
                result = EMPTY
            endif
        endwith
    fend
    
    function Request(uri, useServerXMLHTTP = FALSE)
        if useServerXMLHTTP then
            result = createoleobj("Msxml2.ServerXMLHTTP")
        else
            result = createoleobj("Msxml2.XMLHTTP")
        endif
        with result
            .open("GET", uri, FALSE)
            .send()
        endwith
    fend
    
    function Save(response, path)
        with createoleobj("ADODB.Stream")
            .Open()
            // .Mode = 2 // adModeWrite
            .Type = 1 // adTypeBinary
            .Write(response.responseBody)
            .SaveToFile(path, 2) //adSaveCreateOverWrite
            .Close()
        endwith
        result = fopen(path, F_EXISTS)
    fend
    
    function UnZip(path, name)
        with createoleobj("Shell.Application")
            zip = .Namespace(path)
            for file in zip.Items()
                if file.Name = name then
                    zip.ParentFolder.CopyHere(file)
                    break
                endif
            next
        endwith
        result = fopen(name, F_EXISTS)
    fend
    
endmodule

module Process
    dim locator

    procedure Process
        locator = createoleobj("WbemScripting.SWbemLocator")
    fend
    
    function Find(cmd)
        service = locator.ConnectServer()
        cmd = replace(cmd, "\", "\\")
        q = service.ExecQuery("select CommandLine from win32_process where CommandLine like '%" + cmd + "%'")
        result = q.Count
    fend
    
    function FindListeningPort(port)
        if kindofos() > 24 then
            service = locator.ConnectServer(".", "Root\StandardCimv2")
            q = service.ExecQuery("select LocalPort from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
            result = q.Count
        else
            if betweenstr(doscmd("netstat -anp tcp"), ":" + port, "LISTENING") <> "" then
               result = 1
            else
               result = 0
            endif
        endif
    fend
    

    function Wait(port, timeout = 10)
        limit = gettime() + timeout
        repeat
            if gettime() > limit then
                result = FALSE
                exit
            else
                sleep(0.5)
            endif
        until FindListeningPort(port) > 0
        result = TRUE
    fend

endmodule

textblock json2
//  json2.js
//  2017-06-12
//  Public Domain.
//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
//  NOT CONTROL.

//  This file creates a global JSON object containing two methods: stringify
//  and parse. This file provides the ES5 JSON capability to ES3 systems.
//  If a project might run on IE8 or earlier, then this file should be included.
//  This file does nothing on ES5 systems.

//      JSON.stringify(value, replacer, space)
//          value       any JavaScript value, usually an object or array.
//          replacer    an optional parameter that determines how object
//                      values are stringified for objects. It can be a
//                      function or an array of strings.
//          space       an optional parameter that specifies the indentation
//                      of nested structures. If it is omitted, the text will
//                      be packed without extra whitespace. If it is a number,
//                      it will specify the number of spaces to indent at each
//                      level. If it is a string (such as "\t" or "&nbsp;"),
//                      it contains the characters used to indent at each level.
//          This method produces a JSON text from a JavaScript value.
//          When an object value is found, if the object contains a toJSON
//          method, its toJSON method will be called and the result will be
//          stringified. A toJSON method does not serialize: it returns the
//          value represented by the name/value pair that should be serialized,
//          or undefined if nothing should be serialized. The toJSON method
//          will be passed the key associated with the value, and this will be
//          bound to the value.

//          For example, this would serialize Dates as ISO strings.

//              Date.prototype.toJSON = function (key) {
//                  function f(n) {
//                      // Format integers to have at least two digits.
//                      return (n < 10)
//                          ? "0" + n
//                          : n;
//                  }
//                  return this.getUTCFullYear()   + "-" +
//                       f(this.getUTCMonth() + 1) + "-" +
//                       f(this.getUTCDate())      + "T" +
//                       f(this.getUTCHours())     + ":" +
//                       f(this.getUTCMinutes())   + ":" +
//                       f(this.getUTCSeconds())   + "Z";
//              };

//          You can provide an optional replacer method. It will be passed the
//          key and value of each member, with this bound to the containing
//          object. The value that is returned from your method will be
//          serialized. If your method returns undefined, then the member will
//          be excluded from the serialization.

//          If the replacer parameter is an array of strings, then it will be
//          used to select the members to be serialized. It filters the results
//          such that only members with keys listed in the replacer array are
//          stringified.

//          Values that do not have JSON representations, such as undefined or
//          functions, will not be serialized. Such values in objects will be
//          dropped; in arrays they will be replaced with null. You can use
//          a replacer function to replace those with JSON values.

//          JSON.stringify(undefined) returns undefined.

//          The optional space parameter produces a stringification of the
//          value that is filled with line breaks and indentation to make it
//          easier to read.

//          If the space parameter is a non-empty string, then that string will
//          be used for indentation. If the space parameter is a number, then
//          the indentation will be that many spaces.

//          Example:

//          text = JSON.stringify(["e", {pluribus: "unum"}]);
//          // text is '["e",{"pluribus":"unum"}]'

//          text = JSON.stringify(["e", {pluribus: "unum"}], null, "\t");
//          // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

//          text = JSON.stringify([new Date()], function (key, value) {
//              return this[key] instanceof Date
//                  ? "Date(" + this[key] + ")"
//                  : value;
//          });
//          // text is '["Date(---current time---)"]'

//      JSON.parse(text, reviver)
//          This method parses a JSON text to produce an object or array.
//          It can throw a SyntaxError exception.

//          The optional reviver parameter is a function that can filter and
//          transform the results. It receives each of the keys and values,
//          and its return value is used instead of the original value.
//          If it returns what it received, then the structure is not modified.
//          If it returns undefined then the member is deleted.

//          Example:

//          // Parse the text. Values that look like ISO date strings will
//          // be converted to Date objects.

//          myData = JSON.parse(text, function (key, value) {
//              var a;
//              if (typeof value === "string") {
//                  a =
//   /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
//                  if (a) {
//                      return new Date(Date.UTC(
//                         +a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]
//                      ));
//                  }
//                  return value;
//              }
//          });

//          myData = JSON.parse(
//              "[\"Date(09/09/2001)\"]",
//              function (key, value) {
//                  var d;
//                  if (
//                      typeof value === "string"
//                      && value.slice(0, 5) === "Date("
//                      && value.slice(-1) === ")"
//                  ) {
//                      d = new Date(value.slice(5, -1));
//                      if (d) {
//                          return d;
//                      }
//                  }
//                  return value;
//              }
//          );

//  This is a reference implementation. You are free to copy, modify, or
//  redistribute.

/*jslint
    eval, for, this
*/

/*property
    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== "object") {
    JSON = {};
}

(function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        // Format integers to have at least two digits.
        return (n < 10)
            ? "0" + n
            : n;
    }

    function this_value() {
        return this.valueOf();
    }

    if (typeof Date.prototype.toJSON !== "function") {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? (
                    this.getUTCFullYear()
                    + "-"
                    + f(this.getUTCMonth() + 1)
                    + "-"
                    + f(this.getUTCDate())
                    + "T"
                    + f(this.getUTCHours())
                    + ":"
                    + f(this.getUTCMinutes())
                    + ":"
                    + f(this.getUTCSeconds())
                    + "Z"
                )
                : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }

    var gap;
    var indent;
    var meta;
    var rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string)
            ? "\"" + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === "string"
                    ? c
                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\""
            : "\"" + string + "\"";
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i;          // The loop counter.
        var k;          // The member key.
        var v;          // The member value.
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (
            value
            && typeof value === "object"
            && typeof value.toJSON === "function"
        ) {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case "string":
            return quote(value);

        case "number":

// JSON numbers must be finite. Encode non-finite numbers as null.

            return (isFinite(value))
                ? String(value)
                : "null";

        case "boolean":
        case "null":

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce "null". The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is "object", we might be dealing with an object or an array or
// null.

        case "object":

// Due to a specification blunder in ECMAScript, typeof null is "object",
// so watch out for that case.

            if (!value) {
                return "null";
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === "[object Array]") {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? "[]"
                    : gap
                        ? (
                            "[\n"
                            + gap
                            + partial.join(",\n" + gap)
                            + "\n"
                            + mind
                            + "]"
                        )
                        : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                (gap)
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                (gap)
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? "{}"
                : gap
                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                    : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== "function") {
        meta = {    // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = "";
            indent = "";

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === "string") {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== "function" && (
                typeof replacer !== "object"
                || typeof replacer.length !== "number"
            )) {
                throw new Error("JSON.stringify");
            }

// Make a fake root object containing our value under the key of "".
// Return the result of stringifying the value.

            return str("", {"": value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return (
                        "\\u"
                        + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    );
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with "()" and "new"
// because they can cause invocation, and "=" because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with "@" (a non-JSON character). Second, we
// replace all simple value tokens with "]" characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or "]" or
// "," or ":" or "{" or "}". If that is so, then the text is safe for eval.

            if (
                rx_one.test(
                    text
                        .replace(rx_two, "@")
                        .replace(rx_three, "]")
                        .replace(rx_four, "")
                )
            ) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The "{" operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval("(" + text + ")");

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return (typeof reviver === "function")
                    ? walk({"": j}, "")
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError("JSON.parse");
        };
    }
}());
endtextblock
